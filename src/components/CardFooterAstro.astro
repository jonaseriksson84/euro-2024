---
const { id, open } = Astro.props
const props = Astro.props
console.log({ props })
---

<card-footer-astro
  class="border-t flex justify-evenly divide p-0 w-full"
  data-open={open}
  data-id={id}
>
  <form
    id="usernameForm"
    method="post"
    action="/api/update-username"
    class="flex w-full"
  >
    <div
      class={`hover:bg-[hsl(var(--muted))] w-1/3 p-2 ${open ? 'cursor-pointer' : 'cursor-not-allowed'} text-center`}
      id="button1"
    >
      1
    </div>
    <div
      class={`hover:bg-[hsl(var(--muted))] w-1/3 p-2 ${open ? 'cursor-pointer' : 'cursor-not-allowed'} text-center`}
      id="buttonX"
    >
      X
    </div>
    <div
      class={`hover:bg-[hsl(var(--muted))] w-1/3 p-2 ${open ? 'cursor-pointer' : 'cursor-not-allowed'} text-center`}
      id="button2"
    >
      2
    </div>
  </form>
</card-footer-astro>

<script>
  class CardFooterAstro extends HTMLElement {
    constructor() {
      super()

      const oneButton = this.querySelector('#button1')
      const drawButton = this.querySelector('#buttonX')
      const twoButton = this.querySelector('#button2')

      const open = this.dataset.open
      const id = this.dataset.id

      const predict = async (bet: '1' | 'X' | '2') => {
        await fetch('/api/predict', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, bet }),
        })
      }

      if (open === '') {
        oneButton?.addEventListener('click', () => {
          console.log(`one button was clicked on match ${id}`)
          predict('1')
        })

        drawButton?.addEventListener('click', () => {
          console.log(`X button was clicked on match ${id}`)
          predict('X')
        })

        twoButton?.addEventListener('click', () => {
          console.log(`two button was clicked on match ${id}`)
          predict('2')
        })
      }
    }
  }

  customElements.define('card-footer-astro', CardFooterAstro)
</script>
