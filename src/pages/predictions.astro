---
import CardFooterAstro from '@/components/CardFooterAstro.astro'
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card'
import Layout from '@/layouts/Layout.astro'
import { MatchDay } from 'astro:db'
import { db, Fixture, Country, eq, sql } from 'astro:db'
import { Image } from 'astro:assets'

const teamASubquery = db
  .select({
    id: Country.id,
    name: Country.name,
    flag: Country.flag,
  })
  .from(Country)
  .as('teamA')

const teamBSubquery = db
  .select({
    id: Country.id,
    name: Country.name,
    flag: Country.flag,
  })
  .from(Country)
  .as('teamB')

const fixtures = await db
  .select({
    id: Fixture.id,
    time: Fixture.time,
    matchDay: MatchDay.name,
    teamA: {
      name: teamASubquery.name,
      flag: teamASubquery.flag,
    },
    teamB: {
      name: teamBSubquery.name,
      flag: teamBSubquery.flag,
    },
    open: Fixture.open,
  })
  .from(Fixture)
  .leftJoin(teamASubquery, eq(Fixture.teamA, teamASubquery.id))
  .leftJoin(teamBSubquery, eq(Fixture.teamB, teamBSubquery.id))
  .leftJoin(MatchDay, eq(Fixture.matchDay, MatchDay.id))
  .orderBy(Fixture.time)

let currentMatchDay = ''
let showTitle = false
---

<Layout>
  <div class="flex flex-wrap justify-center gap-4 gap-y-6">
    {
      fixtures.map(({ id, time, teamA, teamB, matchDay, open }) => {
        if (currentMatchDay !== matchDay && matchDay) {
          showTitle = true
          currentMatchDay = matchDay
        } else {
          showTitle = false
        }
        return (
          <>
            {showTitle && (
              <h3 class="block mt-6 text-lg font-bold text-center basis-full">
                {matchDay}
              </h3>
            )}
            <Card className="w-full md:w-[calc(50%-1rem)] lg:w-[calc(33.333%-1rem)]">
              <CardHeader className="text-center p-2">
                <span class="text-sm text-muted-foreground">
                  {new Date(time).toLocaleString('sv-SE', {
                    dateStyle: 'short',
                    timeStyle: 'short',
                  })}
                </span>
              </CardHeader>
              <CardContent className="flex min-w-40 justify-between align-center pb-4">
                <div class="flex justify-start w-1/2 gap-2">
                  {teamA ? (
                    <>
                      <Image
                        src={`https://hatscripts.github.io/circle-flags/flags/${teamA.flag}.svg`}
                        alt={`${teamA.name} flag`}
                        width={24}
                        height={24}
                      />
                      {teamA.name}
                    </>
                  ) : (
                    <>TBD</>
                  )}
                </div>
                <span class="text-sm text-muted-foreground">vs.</span>
                <div class="flex justify-end w-1/2 gap-2">
                  {teamB ? (
                    <>
                      {teamB.name}
                      <Image
                        src={`https://hatscripts.github.io/circle-flags/flags/${teamB.flag}.svg`}
                        alt={`${teamB.name} flag`}
                        width={24}
                        height={24}
                      />
                    </>
                  ) : (
                    <>TBD</>
                  )}
                </div>
              </CardContent>
              <CardFooter className="border-t p-0">
                <CardFooterAstro open={open} id={id} />
              </CardFooter>
            </Card>
          </>
        )
      })
    }
  </div>
</Layout>
